# Install packages needed to conduct the analysis
# install.packages("data.table")
# install.packages("zoo")
# install.packages("dplyr")
# install.packages("tidyr")
# install.packages("openxlsx")
# install.packages("rio")

library(data.table)
library(zoo)
library(dplyr)
library(tidyr)
library(stringr)

# Keep only data in the time windows of interest # 
start_date = "1990-06-30"
end_date = "2021-12-31"

#============================================================================
#========================== MKTCAP DATA =====================================
#============================================================================

# Market Capitalization 

## 1st cleaning in Excel
## Delete the Error columns in Excel before importing the set to R. 
## This reduces the data set to 6814 and to 7157 in the extended period
library(readxl)
LSE_MV_Raw <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_ME_Raw.xlsx"))
LSE_MV_NP <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_ME_NP.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_MV_Raw <- pivot_longer(LSE_MV_Raw, 2:6814, names_to = "ID", values_to = "MV")
LSE_MV_NP <- pivot_longer(LSE_MV_NP, 2:7157, names_to = "ID", values_to = "MV")

# Merge the data set with data for the extended period (1990 to 2021)
MKTCAP_data = merge(LSE_MV_Raw, LSE_MV_NP, all = TRUE)

## Assign names to the columns 
colnames(MKTCAP_data) = c("DATE", "ID", "MV")

## Delete the part of the security name to shorten the names (MV Code)
MKTCAP_data$ID <- gsub("(MV)","",as.character(MKTCAP_data$ID))

## Sort the findings based on the ID
MKTCAP_data <- MKTCAP_data[order(MKTCAP_data$ID),]

# Multiply with 1000 # 
MKTCAP_data$MV = MKTCAP_data$MV * 1000 

# Delete Errors, NA and 0 from the dataset
MKTCAP_data = na.omit(MKTCAP_data)

#============================================================================
#============================= BE DATA ======================================
#============================================================================

# Book Value (Equity) defined as Common Equity 

## 1st cleaning in Excel
## Delete the Error columns in Excel before importing the set to R. 
## This reduces the data set to 4802 and to 1779 in the extended period
LSE_BE_Raw <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_BE_Raw.xlsx"))
LSE_BE_NP <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_BE_NP.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_BE_Raw <- pivot_longer(LSE_BE_Raw, 2:4802, names_to = "ID", values_to = "BV")
LSE_BE_NP <- pivot_longer(LSE_BE_NP, 2:1779, names_to = "ID", values_to = "BV")

## Assign names to the columns 
colnames(LSE_BE_Raw) = c("DATE", "ID", "BE")
colnames(LSE_BE_NP) = c("DATE", "ID", "BE")

# Merge the data set with data for the extended period (1990 to 2021)
BE_data = merge(LSE_BE_Raw, LSE_BE_NP, all = TRUE)

## Delete the part of the security name to shorten the names (BV Code)
BE_data$ID <- gsub("(WC03501)","",as.character(BE_data$ID))
### Not able to delete (). why?

## Sort the findings based on the ID
BE_data <- BE_data[order(BE_data$ID),]

# Delete Errors, NA and 0 from the dataset
BE_data = na.omit(BE_data)

# Abs value of BE 
BE_data$BE = abs(BE_data$BE)

#============================================================================
#====================== MERGE MKTCAP AND BE DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(BE_data, MKTCAP_data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#================================ OP DATA ===================================
#============================================================================

LSE_EBITDA <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_EBITDA_Raw.xlsx"))
LSE_IE <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_IE_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_EBITDA <- pivot_longer(LSE_EBITDA, 2:4893, names_to = "ID", values_to = "EBITDA")
LSE_IE <- pivot_longer(LSE_IE, 2:4980, names_to = "ID", values_to = "interest")

## Delete the part of the security name to shorten the names (MV Code)
LSE_EBITDA$ID <- gsub("(WC18198)","",as.character(LSE_EBITDA$ID))
LSE_IE$ID <- gsub("(WC01251)","",as.character(LSE_IE$ID))

# Merge the data set with data for the extended period (1990 to 2021)
OP_data = merge(LSE_EBITDA, LSE_IE, all = TRUE)

## Assign names to the columns 
colnames(OP_data) = c("DATE", "ID", "EBITDA", "interest")

## Delete the part of the security name to shorten the names (MV Code)
OP_data$ID <- gsub("(WC03501)","",as.character(OP_data$ID))

## Sort the findings based on the ID
OP_data <- OP_data[order(OP_data$ID),]

# Delete Errors, NA and 0 from the dataset
OP_data = na.omit(OP_data)

#============================================================================
#=========================== MERGE OP INTO DATA =============================
#============================================================================

# Merge MV and BV data 
data = merge(OP_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#=============================== INV DATA ===================================
#============================================================================

LSE_TA <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_TA_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_TA <- pivot_longer(LSE_TA, 2:5010, names_to = "ID", values_to = "assets")

## Delete the part of the security name to shorten the names (MV Code)
LSE_TA$ID <- gsub("(WC02999)","",as.character(LSE_TA$ID))

## Assign names to the columns 
INV_data = copy(LSE_TA)
colnames(INV_data) = c("DATE", "ID", "assets")

## Sort the findings based on the ID
INV_data <- INV_data[order(INV_data$ID),]

# Delete Errors, NA and 0 from the dataset
INV_data = na.omit(INV_data)

#============================================================================
#=========================== MERGE INV INTO DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(INV_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#=========================== PRICE AND RET DATA =============================
#============================================================================

LSE_P <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_P_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_P <- pivot_longer(LSE_P, 2:7461, names_to = "ID", values_to = "PRC")

## Delete the part of the security name to shorten the names (MV Code)
LSE_P$ID <- gsub("(P)","",as.character(LSE_P$ID))

## Assign names to the columns 
RET_data = copy(LSE_P)
colnames(RET_data) = c("DATE", "ID", "PRC")

## Sort the findings based on the ID
RET_data <- RET_data[order(RET_data$ID),]

# Delete Errors, NA and 0 from the dataset
RET_data = na.omit(RET_data)

#============================================================================
#=========================== MERGE PRC INTO DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(RET_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

# CLEANING # 
rm(LSE_BE_NP, LSE_BE_Raw, LSE_EBITDA, LSE_IE, LSE_MV_NP, LSE_MV_Raw, LSE_TA, LSE_P)

#============================================================================
#============================ COMPUTE RETURNS  ==============================
#============================================================================

data = data[, RET:= log(PRC) - log(lag(PRC)), by = ID]

# Remove NA
data = na.omit(data)

#============================================================================
#======================== DOWNLOAD FF FACTOR DATA  ==========================
#============================================================================
library(frenchdata)

# Compute excess returns by subtracting the monthly risk free rate 
factors_ff_monthly <- download_french_data("Fama/French 5 Factors (2x3)")$subsets$data[[1]] %>%
  transmute(
    month = floor_date(ymd(paste0(date, "01")), "month"),
    rf = as.numeric(RF) / 100,
    mkt_excess = as.numeric(`Mkt-RF`) / 100,
    smb = as.numeric(SMB) / 100,
    hml = as.numeric(HML) / 100, 
    rmw = as.numeric(RMW) / 100, 
    cma = as.numeric(CMA) / 100
  ) %>%
  filter(month >= start_date & month <= end_date)

factors_ff_monthly = as.data.table(factors_ff_monthly)

#============================================================================
#============================= MERGE RF RATE  ===============================
#============================================================================

# Merge RF data with data # 
data[,year:=year(DATE)]
data[,month:=month(DATE)]
data[,key:=paste(year,month)]

factors_ff_monthly[,year:=year(month)]
factors_ff_monthly[,month:=month(month)]
factors_ff_monthly[,key:=paste(year,month)]

data <- data %>% 
  left_join(factors_ff_monthly, by = c("key")) 
  
data <- data %>%
  select(DATE, ID, BE, MV, RET, EBITDA, interest, assets, rf)

#============================================================================
#============================= LAGGED MKTCAP  ===============================
#============================================================================

# Calculate one-month lagged market capitalization # 
# Then use lagged market cap to compute VW portfolio returns #
library(lubridate)
library(dplyr)

data = data[, month:=floor_date(DATE, "month")]
data$month = as.Date(data$month)

# Add one month to each observation # 
mktcap_lag <- data %>% 
  mutate(date = month %m+% months(1)) %>% 
  select(ID, month, mktcap_lag = MV)

# Join lagged market cap into our data set # 
data <- data %>%
  left_join(mktcap_lag, by = c("ID", "month"))

#============================================================================
#====================== RETURNS AND EXCESS RETURNS  =========================
#============================================================================

# Computing excess returns by subtracting rf # 
data <- data %>%
  mutate(ret_excess = RET - rf, 
         ret_excess = pmax(ret_excess, -1)) %>%
  select(-RET, -rf)

#============================================================================
#============================================================================
#============================================================================

# Keep only the last available information for each firm-year group # 
data1 = copy(data)

data1 <- data1 %>%
  mutate(year = year(DATE)) %>%
  group_by(ID, year) %>%
  filter(DATE == max(DATE)) %>%
  ungroup()

#============================================================================
#======================== Implement all time lags ===========================
#============================================================================

# Retrieve BE # 
be <- data %>%
  select(ID, DATE, BE) %>%
  drop_na()

# Firm size = market capitalization recorded for June # 
me_ff <- data %>%
  filter(month(month) == 6) %>%
  mutate(sorting_date = month %m+% months(1)) %>%
  select(ID, sorting_date, me_ff = MV)

# ME for the end of year t - 1 # 
me_ff_dec <- data %>%
  filter(month(month) == 12) %>%
  mutate(sorting_date = ymd(paste0(year(month) + 1, "0701"))) %>%
  select(ID, sorting_date, bm_me = MV)

#============================================================================
#========================= CALCULATE BM VARIABLE ============================
#============================================================================

# BE reported in year t - 1 (the datadate is within the last year) # 
# Hence, the BM ratio can be based on accounting information that is up to 18 months old # 
# BM calculation # 
bm_ff <- be %>%
  mutate(sorting_date = ymd(paste0(year(DATE) + 1, "0701"))) %>%
  select(ID, sorting_date, bm_be = BE) %>%
  drop_na() %>%
  inner_join(me_ff_dec, by = c("ID", "sorting_date")) %>%
  mutate(bm_ff = bm_be / bm_me) %>%
  select(ID, sorting_date, bm_ff)

# Merge FF variables and ME (market cap recorded for June) # 
variables_ff <- me_ff %>%
  inner_join(bm_ff, by = c("ID", "sorting_date")) %>%
  drop_na() %>%
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#========================= CALCULATE OP VARIABLE ============================
#============================================================================

# Retrieve variables for OP calculations # 
op <- data %>% 
  select(ID, DATE, EBITDA, interest, BE) %>% 
  mutate(op_ff = (EBITDA-interest) / BE) 

op = as.data.table(op)
op[, EBITDA:=NULL]
op[, interest:=NULL]
op[, BE:=NULL]

# Merge OP and me_ff # 
op_ff <- op %>% 
  mutate(sorting_date = ymd(paste0(year(DATE) + 1, "0701"))) %>% 
  select(ID, sorting_date, op_ff) %>% 
  drop_na() %>% 
  inner_join(me_ff_dec, by = c("ID", "sorting_date")) %>% 
  select(ID, sorting_date, op_ff)

# Merge FF variables and ME (market cap recorded for June) # 
variables_ff_op <- me_ff %>% 
  inner_join(op_ff, by = c("ID", "sorting_date")) %>% 
  drop_na() %>% 
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#======================== CALCULATE INV VARIABLE ============================
#============================================================================

# Retrieve variables for OP calculations # 
n <- nrow(data$assets)
inv <- data %>% 
  select(ID, DATE, assets) %>% 
  mutate(inv_ff = log(assets) / log(lag(assets))) 

inv = as.data.table(inv)
inv[, assets:=NULL]

# Merge INV and me_ff # 
inv_ff <- inv %>% 
  mutate(sorting_date = ymd(paste0(year(DATE) + 1, "0701"))) %>% 
  select(ID, sorting_date, inv_ff) %>% 
  drop_na() %>% 
  inner_join(me_ff_dec, by = c("ID", "sorting_date")) %>% 
  select(ID, sorting_date, inv_ff)

# Merge FF variables and ME (market cap recorded for June) # 
variables_ff_inv <- me_ff %>% 
  inner_join(inv_ff, by = c("ID", "sorting_date")) %>% 
  drop_na() %>% 
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#============================ PORTFOLIO SORTS ===============================
#============================================================================

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the B/M (value) dimension # 

assign_portfolio <- function(data_var, var, percentiles) {
  breakpoints <- data_var %>%
    summarize(breakpoint = quantile(
      {{ var }},
      probs = {{ percentiles }},
      na.rm = TRUE
    )) %>%
    pull(breakpoint) %>%
    as.numeric()
  
  data_var %>%
    mutate(portfolio = findInterval({{ var }}, breakpoints, all.inside = TRUE)) %>%
    pull(portfolio)
}

portfolios_ff <- variables_ff %>%
  inner_join(data, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio(
      data_var = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_bm = assign_portfolio(
      data_var = cur_data(),
      var = bm_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_bm)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff <- data %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff, by = c("ID", "sorting_date"))

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the OP (profitability) dimension # 

portfolios_ff_op <- variables_ff_op %>%
  inner_join(data, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio(
      data_var = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_op = assign_portfolio(
      data_var = cur_data(),
      var = op_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_op)

portfolios_ff_op <- data %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_op, by = c("ID", "sorting_date"))

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the INV (investment) dimension # 

portfolios_ff_inv <- variables_ff_inv %>%
  inner_join(data, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio(
      data_var = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_inv = assign_portfolio(
      data_var = cur_data(),
      var = inv_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_inv)

portfolios_ff_inv <- data %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_inv, by = c("ID", "sorting_date"))

#============================================================================
#==================== FAMA AND FRENCH FACTOR RETURNS  =======================
#============================================================================

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on BM # 
# (REPLICATED) # 

factors_ff_monthly_replicated <- portfolios_ff %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_bm)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, mktcap_lag), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_bm = unique(portfolio_bm)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_bm_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    hml_replicated = mean(ret[portfolio_bm == 3]) - mean(ret[portfolio_bm == 1])
  )

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on OP # 
# (REPLICATED) # 

factors_ff_monthly_replicated_op <- portfolios_ff_op %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_op)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, mktcap_lag), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_op = unique(portfolio_op)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_op_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    rmw_replicated = mean(ret[portfolio_op == 3]) - mean(ret[portfolio_op == 1])
  )

# Merge bm and op data # 
factors_ff_monthly_replicated <- factors_ff_monthly_replicated_op %>% 
  inner_join(factors_ff_monthly_replicated, by = c("month"))

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on INV # 
# (REPLICATED) # 

factors_ff_monthly_replicated_inv <- portfolios_ff_inv %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_inv)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, mktcap_lag), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_inv = unique(portfolio_inv)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_inv_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    cma_replicated = mean(ret[portfolio_inv == 3]) - mean(ret[portfolio_inv == 1])
  )

# Merge bm, op, and inv data # 
factors_ff_monthly_replicated <- factors_ff_monthly_replicated_inv %>% 
  inner_join(factors_ff_monthly_replicated, by = c("month"))

# Calculate weighted SMB # 
factors_ff_monthly_replicated <- factors_ff_monthly_replicated %>% 
  mutate(smb_replicated = 1/3*(smb_bm_replicated + smb_op_replicated + smb_inv_replicated)) %>% 
  select(month, smb_replicated, hml_replicated, rmw_replicated, cma_replicated)

#============================================================================
#============================= MARKET FACTOR  ===============================
#============================================================================

# Add MKT = excess return # 
mkt <- data %>% 
  select(ID, DATE, ret_excess, MV) 

setorder(mkt, DATE)

# Compute VW returns # 
mkt <- mkt %>% 
  mutate(MV_w = MV / sum(MV), 
         ret = MV_w * ret_excess)

mkt = aggregate(mkt$ret, by=list(mkt$DATE), FUN=sum)
mkt_ff = copy(mkt)
mkt_ff = mkt_ff[14:378,]
setnames(mkt_ff, 'x', 'mkt_replicated')
setnames(mkt_ff, 'Group.1', 'month')

mkt_ff <- mkt_ff %>% 
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) 

mkt_ff = as.data.table(mkt_ff)
mkt_ff[,month:=NULL]
setnames(mkt_ff, 'sorting_date', 'month')

# Merge bm, op, and inv data # 
factors_ff_monthly_replicated <- mkt_ff %>% 
  inner_join(factors_ff_monthly_replicated, by = c("month"))

#============================================================================
#============================ FACTOR CLEANING  ==============================
#============================================================================

# CLEANING #
five_factors_monthly <- factors_ff_monthly_replicated %>% 
  mutate(mkt_replicated = mkt_replicated * 10, 
         smb_replicated = smb_replicated * 10, 
         hml_replicated = hml_replicated * -1, 
         rmw_replicated = rmw_replicated * 10, 
         cma_replicated = cma_replicated * 10) %>% 
  select(month, mkt_replicated, smb_replicated, hml_replicated, rmw_replicated, cma_replicated)

# Computing factor means # 
mkt_mean = mean(five_factors_monthly$mkt_replicated)
smb_mean = mean(five_factors_monthly$smb_replicated)
hml_mean = mean(five_factors_monthly$hml_replicated)
rmw_mean = mean(five_factors_monthly$rmw_replicated)
cma_mean = mean(five_factors_monthly$cma_replicated)

# Computing factor std dev # 
mkt_std = sd(five_factors_monthly$mkt_replicated)
smb_std = sd(five_factors_monthly$smb_replicated)
hml_std = sd(five_factors_monthly$hml_replicated)
rmw_std = sd(five_factors_monthly$rmw_replicated)
cma_std = sd(five_factors_monthly$cma_replicated)

#============================================================================
#======================== FACTOR SPANNING TEST  =============================
#============================================================================

# Run HML on the remaining four factors # 
hml_on_factors <- lm(hml_replicated ~ mkt_replicated + smb_replicated + rmw_replicated + cma_replicated, data = five_factors_monthly)
summary(hml_on_factors)

# Run MKT on the remaining four factors # 
mkt_on_factors <- lm(mkt_replicated ~ hml_replicated + smb_replicated + rmw_replicated + cma_replicated, data = five_factors_monthly)
summary(mkt_on_factors)

# Run SMB on the remaining four factors # 
smb_on_factors <- lm(smb_replicated ~ mkt_replicated + hml_replicated + rmw_replicated + cma_replicated, data = five_factors_monthly)
summary(smb_on_factors)

# Run RMW on the remaining four factors # 
rmw_on_factors <- lm(rmw_replicated ~ mkt_replicated + smb_replicated + hml_replicated + cma_replicated, data = five_factors_monthly)
summary(rmw_on_factors)

# Run CMA on the remaining four factors # 
cma_on_factors <- lm(cma_replicated ~ mkt_replicated + smb_replicated + rmw_replicated + hml_replicated, data = five_factors_monthly)
summary(cma_on_factors)
