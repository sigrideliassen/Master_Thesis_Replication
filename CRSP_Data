# Dette er noen pakker du må sørge for at du har i R: 
# Du kan trykke på "Packages" og huke av for "zoo" og "dply" 
library(data.table)
library(zoo)
library(dplyr)
  
# Import CRSP data 
# Jeg trykker bare på "Import data" i stedet for å kode innhentingen (også lime inn i koden så du har den liggende til neste gang du kjører)
library(readxl)
NYSE = as.data.table(read_excel("Documents/Master/Master Thesis/Data_CRSP_Compustat/NYSE.xlsx"))
AMEX = as.data.table(read_excel("Documents/Master/Master Thesis/Data_CRSP_Compustat/AMEX.xlsx"))
NASDAQ = as.data.table(read_excel("Documents/Master/Master Thesis/Data_CRSP_Compustat/NASDAQ.xlsx"))

# Merge data
# Dette er kun nødvendig hvis du har et delt datasett, men for London og Japan er det vel ikke det? 
NYSE_AMEX = merge.data.table(NYSE,AMEX)
NYSE_AMEX = merge(NYSE, AMEX, all = TRUE)
data = merge.data.table(NYSE_AMEX,NASDAQ)
data = merge(NYSE_AMEX, NASDAQ, all = TRUE) # Dette er endelig datasett jeg jobber med gjennom resten av koden 

# Cleaning 
colnames(data) = c("PERMNO", "DATE", "SHRCD", "EXCHCD", "DLRET", "PRC", "RET", "SHROUT", "RF") # Her har jeg endret navn på variablene så det er omtrent konsistent med hans koder 
data$PRC = abs(data$PRC) # VI MÅ BLI ENIGE OM VI SKAL TA ABS ELLR IKKE!! Tenker vi bare kjører på med absolute prices jeg 

# Sort by TICKER 
# Dette vil jeg tro ikke er relevant for deg siden oppsettet er noe annet, men det kan vi også se nærmere på når du kommer hit 
setkey(data,TICKER,DATE)
vec=c('TICKER','DATE')
setorderv(data,vec)

# Replace NA returns with delisted returns 
# I datasettet fra CRSP så mangler selskapene returns den måneden de blir delisted (tatt av børs) 
# Men de har en delisted return, så jeg erstatter tomme celler med den delisted returnen 
# Du har nok kanskje ikke delistede returns, så du kan for eksempel heller endre til at den returnen er lik måneden før (for det er nok ikke mange tilfelller)  
index = which(!is.na(data$DLRET))
D_R = data$DLRET[index]
R = data$RET
R[R = index] <- D_R
data$RET = R 

# Replace NA prices calculated from delisted returns 
# Her er det samme som over, men her er det prisene vi må endre 
# Vi kan se nærmere på hvordan denne bør gjøres når du kommer så langt 
index = which(!is.na(data$DLRET))
P = data$PRC
P[P=index] <- P[index - 1]*(1 + data$RET[index])
data$PRC = P 

# NA prices and returns without delisiting returns - DELETING ROWS
# Her sletter vi alle de som fortsatt har tomme celler etter å ha erstattet med delisted returns, og fjerner bare fra datasettet 
index2 = which(is.na(data$RET))
data = data[-which(is.na(data$PRC))]
data = data[-which(is.na(data$RET))]

# FINDING MARKET CAP 
# Absolute price * shares outstanding 
data$MKTCAP = data[,MKTCAP:=abs(PRC)*SHROUT]

# Create lagged mkt cap of each stock at each date
# Lagger med en måned - kan hende det vil dukke opp problemer med at datasettet ditt ikke er sortert på samme måte, men det finner vi ut av 
data$MKTCAP_LAG = data[,MKTCAP_LAG:=shift(MKTCAP), by=PERMNO]

# Det her har jeg ikke helt skjønt hvorfor vi gjør, men det er i forbindelse med NYSE sorteringen virker det som 
data[,Year:=year(DATE)]
data[,month:=month(DATE)]
data[,key:=paste(Year,month)]

# Remove NA in MKTCAP_LAG
data = data[,DLRET:=NULL]
data = data[,SHRCD:=NULL]
data = data[,PRC:=NULL]
data = data[,SHROUT:=NULL]
data = na.omit(data)

# Create variable for SMB ranking. We define lagged market cap as a ranking variable
data = data[, `:=`(decile_month, cut(MKTCAP_LAG, breaks = quantile(MKTCAP_LAG[which(EXCHCD==1)],probs = c(0,0.5,1), na.rm = TRUE), include.lowest = TRUE, labels = FALSE)),by = key]
data = data[, `:=`(decile_month_help, cut(MKTCAP_LAG, breaks = quantile(MKTCAP_LAG,probs = c(0,0.5,1), na.rm = TRUE), include.lowest = TRUE, labels = FALSE)),by = key]
data[,decile_month2:=ifelse(is.na(decile_month) & decile_month_help==1,1,ifelse(is.na(decile_month) & decile_month_help==2,2,decile_month))]

data = data[,decile_month:=NULL] 
data = data[,decile_month_help:=NULL] 

smb_deciles = copy(data)

# Aggreagate return of firm that has several securities traded
data[,PERMNO_weight:=MKTCAP_LAG/sum(MKTCAP_LAG)]
data[,RET:=sum(PERMNO_weight*RET),by=.(PERMCO,key)]
data[,MKTCAP_LAG:=sum(MKTCAP_LAG),by=.(PERMCO,key)]
data=unique(data[,.(PERMNO,DATE,EXCHCD,MKTCAP,MKTCAP_LAG,RET,key,Year,month,PERMCO)],by=c("PERMCO","key"))
setorder(data,PERMCO,key) 

# Linking 
# STEP 1: Link 
link = as.data.table(read_excel("Documents/Master/Master Thesis/Data_CRSP_Compustat/link.xlsx"))
link$LINKDT = as.Date(link$LINKDT,format="%Y%m%d")
link$LINKENDDT = as.Date(link$LINKENDDT,format="%Y%m%d")

merged = merge(data,link,by.x ="PERMCO",by.y ="LPERMCO",allow.cartesian = T)
merged$DATE = as.Date(merged$DATE)
setkey(merged)
merged = merged[(is.na(LINKDT) | merged$DATE>=merged$LINKDT) & (is.na(LINKENDDT) | DATE<=LINKENDDT)]
setorder(merged,GVKEY,DATE)

#============================================================================

# Multiple GVKEYS per PERMCO
# FIRST: if LC not LC linktype
merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=sum(LINKTYPE=='LC'),by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match==T & LINKTYPE!='LC')]

# SECOND: if P and not P linkprim
merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=sum(LINKTYPE=='P'),by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match==T & LINKTYPE!='P')]

# THIRD: if 1 and not 1 LIID 
merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=sum(LIID==1),by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match==T & LIID!=1)]

# FORTH: use the link that's current
merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=sum(is.na(LINKENDDT)),by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match==T & !is.na(LINKENDDT))]

# FIFTH: use the link that's been around the longest - FIKS DENNE 
# dates$dates = as.data.table(merged$LINKENDDT) 
# dates[-which(is.na(dates))]
# dates = as.Date(dates$dates)
# max(dates) 

merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=NULL]
merged[is.na(LINKENDDT),LINKENDDT:=as.Date('2022-01-31','%Y-%m-%d')]
merged[,Date_diff:=as.integer(LINKENDDT-LINKDT)]
setorder(merged,PERMCO,DATE,Date_diff)
merged[prob==T,Good_match:=Date_diff==Date_diff[.N],by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match!=T)]

# SIXTH: use GVKEY that's around the longest
merged[,prob:=.N>1,by=.(PERMCO,DATE)]
merged[,Good_match:=NULL]
setorder(merged,GVKEY,LINKDT)
merged[prob==T,start_Date:=LINKDT[1],by=.(GVKEY)]
setorder(merged,GVKEY,LINKENDDT)
merged[prob==T,end_Date:=LINKENDDT[.N],by=.(GVKEY)]
merged[,Date_diff:=as.integer(end_Date-start_Date)]
setorder(merged,PERMCO,DATE,Date_diff)
merged[prob==T,Good_match:=Date_diff==Date_diff[.N],by=.(PERMCO,DATE)]
merged = merged[!(prob==T & Good_match!=T)]

# SEVENTH
setorder(merged,PERMCO,DATE,GVKEY)
merged = unique(merged,by=c('PERMCO','DATE'))

# CLEAN UP
if(nrow(unique(merged,by=c('GVKEY','DATE'))) !=nrow(merged) | nrow(unique(merged,by=c('PERMCO','DATE'))) !=nrow(merged)) {stop ('1. Monthly firm level returns.R: There is an issue with your merge between CRSP/Compustat')} 
# mergedlink = merged[,.(QVKEY,DATE,EXCHCD,lag_mkt_cap,return,Date_diff)]
mergedlink = copy(merged)
mergedlink[,conm:=NULL]
mergedlink[,LINKPRIM:=NULL]
mergedlink[,LIID:=NULL]
mergedlink[,LINKTYPE:=NULL]
mergedlink[,LINKDT:=NULL]
mergedlink[,LINKENDDT:=NULL]
mergedlink[,prob:=NULL]
mergedlink[,Date_diff:=NULL]
mergedlink[,start_Date:=NULL]
mergedlink[,end_Date:=NULL]
mergedlink[,Good_match:=NULL]
mergedlink[,special_key:=(mergedlink$Year+mergedlink$month/100)]

#============================================================================
#============================================================================
#============================================================================

# Merge with COMPUSTAT
compustat = as.data.table(read_excel("Documents/Master/Master Thesis/Data_CRSP_Compustat/compustat.xlsx"))
compustat$datadate = as.Date(compustat$datadate,format="%Y%m%d")

compustat[,Year:=year(datadate)]
compustat[,month:=month(datadate)]
compustat[,key:=paste(Year,month)]

setkey(compustat,key)

compustat[,special_key:=(compustat$Year+compustat$month/100)]

x = merge(mergedlink,compustat,by=c('GVKEY','key'),all.x=TRUE)
setorderv(x,c("GVKEY","special_key.x"))

#============================================================================

# Shareholder's Equity (SHE) 
data[,SHE:=ifelse(!is.na(seq),seq,ifelse(!is.na(ceq+pstk),ceq+pstk,ifelse(!is.na(at+lt+mib),at-lt-mib,at-lt)))] 

# Preferred Stock (PS)
data[,PS:=ifelse(!is.na(pstkrv),pstkrv,ifelse(!is.na(pstkl),pstkl,pstk))]

# Book Equity (BE) = Common Equity per definition 
data[,BE:=SHE-PS]

data=data[,c("GVKEY","key","PERMNO", "PERMCO", "DATE","EXCHCD","MKTCAP","MKTCAP_LAG","RET","Year.x","month.x","special_key.x","BE")]








