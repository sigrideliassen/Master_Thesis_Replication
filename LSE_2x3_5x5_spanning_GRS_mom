# Install packages needed to conduct the analysis
# install.packages("data.table")
# install.packages("zoo")
# install.packages("dplyr")
# install.packages("tidyr")
# install.packages("openxlsx")
# install.packages("rio")

library(data.table)
library(zoo)
library(dplyr)
library(tidyr)
library(stringr)

# Keep only data in the time windows of interest # 
start_date = "1990-06-30"
end_date = "2021-12-31"

#============================================================================
#========================== MKTCAP DATA =====================================
#============================================================================

# Market Capitalization 

## 1st cleaning in Excel
## Delete the Error columns in Excel before importing the set to R. 
## This reduces the data set to 6814 and to 7157 in the extended period
library(readxl)
LSE_MV_Raw <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_ME_Raw.xlsx"))
LSE_MV_NP <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_ME_NP.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_MV_Raw <- pivot_longer(LSE_MV_Raw, 2:6814, names_to = "ID", values_to = "MV")
LSE_MV_NP <- pivot_longer(LSE_MV_NP, 2:7157, names_to = "ID", values_to = "MV")

# Merge the data set with data for the extended period (1990 to 2021)
MKTCAP_data = merge(LSE_MV_Raw, LSE_MV_NP, all = TRUE)

## Assign names to the columns 
colnames(MKTCAP_data) = c("DATE", "ID", "MV")

## Delete the part of the security name to shorten the names (MV Code)
MKTCAP_data$ID <- gsub("(MV)","",as.character(MKTCAP_data$ID))

## Sort the findings based on the ID
MKTCAP_data <- MKTCAP_data[order(MKTCAP_data$ID),]

# Multiply with 1000 # 
MKTCAP_data$MV = MKTCAP_data$MV * 1000 

# Delete Errors, NA and 0 from the dataset
MKTCAP_data = na.omit(MKTCAP_data)

#============================================================================
#============================= BE DATA ======================================
#============================================================================

# Book Value (Equity) defined as Common Equity 

## 1st cleaning in Excel
## Delete the Error columns in Excel before importing the set to R. 
## This reduces the data set to 4802 and to 1779 in the extended period
LSE_BE_Raw <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_BE_Raw.xlsx"))
LSE_BE_NP <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_BE_NP.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_BE_Raw <- pivot_longer(LSE_BE_Raw, 2:4802, names_to = "ID", values_to = "BV")
LSE_BE_NP <- pivot_longer(LSE_BE_NP, 2:1779, names_to = "ID", values_to = "BV")

## Assign names to the columns 
colnames(LSE_BE_Raw) = c("DATE", "ID", "BE")
colnames(LSE_BE_NP) = c("DATE", "ID", "BE")

# Merge the data set with data for the extended period (1990 to 2021)
BE_data = merge(LSE_BE_Raw, LSE_BE_NP, all = TRUE)

## Delete the part of the security name to shorten the names (BV Code)
BE_data$ID <- gsub("(WC03501)","",as.character(BE_data$ID))
### Not able to delete (). why?

## Sort the findings based on the ID
BE_data <- BE_data[order(BE_data$ID),]

# Delete Errors, NA and 0 from the dataset
BE_data = na.omit(BE_data)

# Abs value of BE 
BE_data$BE = abs(BE_data$BE)

#============================================================================
#====================== MERGE MKTCAP AND BE DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(BE_data, MKTCAP_data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#================================ OP DATA ===================================
#============================================================================

LSE_EBITDA <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_EBITDA_Raw.xlsx"))
LSE_IE <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_IE_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_EBITDA <- pivot_longer(LSE_EBITDA, 2:4893, names_to = "ID", values_to = "EBITDA")
LSE_IE <- pivot_longer(LSE_IE, 2:4980, names_to = "ID", values_to = "interest")

## Delete the part of the security name to shorten the names (MV Code)
LSE_EBITDA$ID <- gsub("(WC18198)","",as.character(LSE_EBITDA$ID))
LSE_IE$ID <- gsub("(WC01251)","",as.character(LSE_IE$ID))

# Merge the data set with data for the extended period (1990 to 2021)
OP_data = merge(LSE_EBITDA, LSE_IE, all = TRUE)

## Assign names to the columns 
colnames(OP_data) = c("DATE", "ID", "EBITDA", "interest")

## Delete the part of the security name to shorten the names (MV Code)
OP_data$ID <- gsub("(WC03501)","",as.character(OP_data$ID))

## Sort the findings based on the ID
OP_data <- OP_data[order(OP_data$ID),]

# Delete Errors, NA and 0 from the dataset
OP_data = na.omit(OP_data)

#============================================================================
#=========================== MERGE OP INTO DATA =============================
#============================================================================

# Merge MV and BV data 
data = merge(OP_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#=============================== INV DATA ===================================
#============================================================================

LSE_TA <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_TA_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_TA <- pivot_longer(LSE_TA, 2:5010, names_to = "ID", values_to = "assets")

## Delete the part of the security name to shorten the names (MV Code)
LSE_TA$ID <- gsub("(WC02999)","",as.character(LSE_TA$ID))

## Assign names to the columns 
INV_data = copy(LSE_TA)
colnames(INV_data) = c("DATE", "ID", "assets")

## Sort the findings based on the ID
INV_data <- INV_data[order(INV_data$ID),]

# Delete Errors, NA and 0 from the dataset
INV_data = na.omit(INV_data)

#============================================================================
#=========================== MERGE INV INTO DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(INV_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

#============================================================================
#=========================== PRICE AND RET DATA =============================
#============================================================================

LSE_P <- as.data.table(read_excel("Documents/Master/Master Thesis/Refinitiv/Ready for R - LSE/LSE_P_Raw.xlsx"))

## Change layout of the Dataset using the tidyr package
LSE_P <- pivot_longer(LSE_P, 2:7461, names_to = "ID", values_to = "PRC")

## Delete the part of the security name to shorten the names (MV Code)
LSE_P$ID <- gsub("(P)","",as.character(LSE_P$ID))

## Assign names to the columns 
RET_data = copy(LSE_P)
colnames(RET_data) = c("DATE", "ID", "PRC")

## Sort the findings based on the ID
RET_data <- RET_data[order(RET_data$ID),]

# Delete Errors, NA and 0 from the dataset
RET_data = na.omit(RET_data)

#============================================================================
#=========================== MERGE PRC INTO DATA ============================
#============================================================================

# Merge MV and BV data 
data = merge(RET_data, data, all = TRUE)
data$DATE = as.Date(data$DATE)

# Delete Errors, NA and 0 from the dataset
data = na.omit(data)

# Convert dataset to a Data Table
data = as.data.table(data)

# Sort by ID
setkey(data,DATE,ID)
vec=c('ID', 'DATE')
setorderv(data,vec)

# CLEANING # 
rm(LSE_BE_NP, LSE_BE_Raw, LSE_EBITDA, LSE_IE, LSE_MV_NP, LSE_MV_Raw, LSE_TA, LSE_P)

#============================================================================
#============================ COMPUTE RETURNS  ==============================
#============================================================================

data = data[, RET:= log(PRC) - log(lag(PRC)), by = ID]

# Remove NA
data = na.omit(data)

#============================================================================
#======================== DOWNLOAD FF FACTOR DATA  ==========================
#============================================================================
library(frenchdata)
library(lubridate)

# Compute excess returns by subtracting the monthly risk free rate 
factors_ff_monthly <- download_french_data("Fama/French 5 Factors (2x3)")$subsets$data[[1]] %>%
  transmute(
    month = floor_date(ymd(paste0(date, "01")), "month"),
    rf = as.numeric(RF) / 100,
    mkt_excess = as.numeric(`Mkt-RF`) / 100,
    smb = as.numeric(SMB) / 100,
    hml = as.numeric(HML) / 100, 
    rmw = as.numeric(RMW) / 100, 
    cma = as.numeric(CMA) / 100
  ) %>%
  filter(month >= start_date & month <= end_date)

factors_ff_monthly = as.data.table(factors_ff_monthly)

#============================================================================
#============================= MERGE RF RATE  ===============================
#============================================================================

# Merge RF data with data # 
data[,year:=year(DATE)]
data[,month:=month(DATE)]
data[,key:=paste(year,month)]

factors_ff_monthly[,year:=year(month)]
factors_ff_monthly[,month:=month(month)]
factors_ff_monthly[,key:=paste(year,month)]

data <- data %>% 
  left_join(factors_ff_monthly, by = c("key")) 

data <- data %>%
  select(DATE, ID, BE, MV, RET, EBITDA, interest, assets, rf)

# Calculate excess returns 
data <- data %>% 
  mutate(ret_excess = RET - rf)

#============================================================================
#======================== Implement all time lags ===========================
#============================================================================

# Firm size = market capitalization recorded for June # 
me_ff <- data %>%
  filter(month(DATE) == 6) %>%
  mutate(sorting_date = DATE %m+% months(1)) %>%
  select(ID, sorting_date, me_ff = MV)

# First day of each month 
me_ff = me_ff[, sorting_date := lubridate::floor_date(sorting_date, "month")]

# ME for the end of year t - 1 # 
me_ff_dec <- data %>%
  filter(month(DATE) == 12) %>%
  mutate(sorting_date = ymd(paste0(year(DATE) + 1, "0701)"))) %>%
  select(ID, sorting_date, bm_me = MV)

#============================================================================
#========================= CALCULATE BM VARIABLE ============================
#============================================================================

# BE reported in year t - 1 (the datadate is within the last year) # 
# Hence, the BM ratio can be based on accounting information that is up to 18 months old # 
# BM calculation # 

be <- data %>% 
  select(DATE, ID, BE) %>% 
  drop_na()

# Retrieve yearly variables 
be_year <- be %>% 
  filter(month(DATE) == 6) %>% 
  mutate(sorting_date = DATE %m+% months(1)) %>% 
  select(ID, DATE, sorting_date, BE)

bm_ff <- be_year %>%
  mutate(sorting_date = ymd(paste0(year(DATE) + 1, "0701"))) %>%
  select(ID, sorting_date, bm_be = BE) %>%
  drop_na() %>%
  inner_join(me_ff_dec, by = c("ID", "sorting_date")) %>%
  mutate(bm_ff = bm_be / bm_me) %>%
  select(ID, sorting_date, bm_ff)

# Merge FF variables and ME (market cap recorded for June) # 
variables_ff <- me_ff %>%
  inner_join(bm_ff, by = c("ID", "sorting_date")) %>%
  drop_na() %>%
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#========================= CALCULATE OP VARIABLE ============================
#============================================================================

# Lag OP variables 
op_var <- data %>%
  select(ID, DATE, EBITDA, interest, BE)

# Retrieve yearly variables 
op_year <- op_var %>% 
  filter(month(DATE) == 6) %>% 
  mutate(sorting_date = DATE %m+% months(1)) %>% 
  select(ID, DATE, sorting_date, EBITDA, interest, BE)

# First day of each month 
op_year = op_year[, sorting_date := lubridate::floor_date(sorting_date, "month")]

# Lag variables 
op_year = op_year[, EBITDA:=lag(EBITDA), by = "ID"]
op_year = op_year[, interest:=lag(interest), by = "ID"]
op_year = op_year[, BE:=lag(BE), by = "ID"]

# Retrieve variables for OP calculations # 
op_ff <- op_year %>% 
  select(ID, sorting_date, EBITDA, interest, BE) %>% 
  mutate(op_ff = (EBITDA-interest) / BE) %>% 
  select(-c(EBITDA, interest, BE)) %>% 
  drop_na()

# Merge OP and me_ff # 
# Merge FF variables and ME (market cap recorded for June) # 
variables_ff_op <- me_ff %>% 
  inner_join(op_ff, by = c("ID", "sorting_date")) %>% 
  drop_na() %>% 
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#======================== CALCULATE INV VARIABLE ============================
#============================================================================

# Lag OP variables 
inv_var <- data %>%
  select(ID, DATE, assets)

# Retrieve yearly variables 
inv_year <- inv_var %>% 
  filter(month(DATE) == 6) %>% 
  mutate(sorting_date = DATE %m+% months(1)) %>% 
  select(ID, DATE, sorting_date, assets)

# First day of each month 
inv_year = inv_year[, sorting_date := lubridate::floor_date(sorting_date, "month")]

# Lag assets 
inv_year = inv_year[, at_lag:= lag(assets), by = "ID"]
inv_year = inv_year[, at_lag_2:=lag(assets, 2), by = "ID"]

# Retrieve variables for OP calculations # 
inv_ff <- inv_year %>% 
  select(ID, sorting_date, at_lag, at_lag_2) %>% 
  mutate(inv_ff = (at_lag_2 - at_lag) / at_lag_2) %>% 
  select(-c(at_lag_2, at_lag)) %>% 
  drop_na()

# Merge OP and me_ff # 
# Merge FF variables and ME (market cap recorded for June) # 
variables_ff_inv <- me_ff %>% 
  inner_join(inv_ff, by = c("ID", "sorting_date")) %>% 
  drop_na() %>% 
  distinct(ID, sorting_date, .keep_all = TRUE)

#============================================================================
#========================== CALCULATE MOM VARIABLE ==========================
#============================================================================
library(tidyverse)
library(Hmisc)
library(roll)

# Lag MV 
data2 = copy(data)
data2 = data2[, mktcap_lag:= lag(MV), by = "ID"]

# Lag prior-return (cumulative) # 
mom <- data2 %>% 
  group_by(ID) %>% 
  arrange(DATE, .by_group = T) %>% 
  mutate(
    ret_cum_0_10 = roll_prod(1+RET, width = 11)-1, 
    mom_ff = dplyr::lag(ret_cum_0_10, n = 2)
  ) %>% 
  select(-c(BE, EBITDA, interest, assets, RET, ret_excess, rf, MV))

# First day of each month 
mom_ff = as.data.table(mom)
mom_ff = mom_ff[, sorting_date := lubridate::floor_date(DATE, "month")]

# Merge INV and me_ff # 
# Merge FF variables and ME (market cap recorded for June) # 
variables_ff_mom <- mom_ff 
setnames(variables_ff_mom, "mktcap_lag", "me_ff_month")

# Cleaning 
variables_ff_mom = variables_ff_mom[, ret_cum_0_10:=NULL]
variables_ff_mom = variables_ff_mom[, DATE:=NULL]
variables_ff_mom = na.omit(variables_ff_mom)

#============================================================================
#============================================================================
#=========================  FACTOR CONSTRUCTION =============================
#============================================================================
#============================================================================
library(dplyr) 

#============================================================================
#================================= BM 2x3 ===================================
#============================================================================

# Construct portfolio based on breakpoints # 
# Median breakpoints for the two portfolios in the size dimension # 
# Breakpoints for the three portfolios in the B/M (value) dimension # 

assign_portfolio_lse <- function(data_lse, var, percentiles) {
  breakpoints <- data_lse %>%
    plyr::summarize(breakpoint = quantile(
      {{ var }},
      probs = {{ percentiles }},
      na.rm = TRUE
    )) %>%
    pull(breakpoint) %>%
    as.numeric()
  
  data_lse %>%
    mutate(portfolio = findInterval({{ var }}, sort(breakpoints), all.inside = TRUE)) %>%
    pull(portfolio)
}

# Clean data set, first per month 
library(data.table)

data_ff = data
data_ff = data_ff[, month := lubridate::floor_date(DATE, "month")]

portfolios_ff <- variables_ff %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_lse(
      data_lse = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_bm = assign_portfolio_lse(
      data_lse = cur_data(),
      var = bm_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_bm)

library(dplyr)
library(lubridate)
# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff, by = c("ID", "sorting_date"))

#============================================================================
#================================= OP 2x3 ===================================
#============================================================================

# Construct portfolio based on breakpoints # 
# Median breakpoints for the two portfolios in the size dimension # 
# Breakpoints for the three portfolios in the OP (value) dimension # 

# Clean data set, first per month 
portfolios_ff_op <- variables_ff_op %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_lse(
      data_lse = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_op = assign_portfolio_lse(
      data_lse = cur_data(),
      var = op_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_op)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_op <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_op, by = c("ID", "sorting_date"))

#============================================================================
#================================ INV 2x3 ===================================
#============================================================================

# Construct portfolio based on breakpoints # 
# Median breakpoints for the two portfolios in the size dimension # 
# Breakpoints for the three portfolios in the INV (value) dimension # 

# Clean data set, first per month 
portfolios_ff_inv <- variables_ff_inv %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_lse(
      data_lse = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_inv = assign_portfolio_lse(
      data_lse = cur_data(),
      var = inv_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_inv)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_inv <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_inv, by = c("ID", "sorting_date"))

#============================================================================
#================================ INV 2x3 ===================================
#============================================================================

# Construct portfolio based on breakpoints # 
# Median breakpoints for the two portfolios in the size dimension # 
# Breakpoints for the three portfolios in the INV (value) dimension # 

assign_portfolio_lse_mom <- function(data_lse, var, percentiles) {
  breakpoints <- data_lse %>%
    plyr::summarize(breakpoint = quantile(
      {{ var }},
      probs = {{ percentiles }},
      na.rm = TRUE
    )) %>%
    pull(breakpoint) %>%
    as.numeric()
  
  data_lse %>%
    mutate(portfolio = findInterval({{ var }}, sort(breakpoints), all.inside = TRUE)) %>%
    pull(portfolio)
}

# Clean data set, first per month 
portfolios_ff_mom <- variables_ff_mom %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_lse_mom(
      data_lse = cur_data(),
      var = me_ff_month,
      percentiles = c(0, 0.5, 1)
    ),
    portfolio_mom = assign_portfolio_lse_mom(
      data_lse = cur_data(),
      var = mom_ff,
      percentiles = c(0, 0.3, 0.7, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_mom)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_mom <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_mom, by = c("ID", "sorting_date"))

#============================================================================
#==================== FAMA AND FRENCH FACTOR RETURNS  =======================
#============================================================================

#============================================================================
#============================ SMB AND HML FACTOR ============================
#============================================================================

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on BM # 
# (REPLICATED) # 

factors_monthly <- portfolios_ff %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_bm)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_bm = unique(portfolio_bm)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_bm_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    hml_replicated = mean(ret[portfolio_bm == 3]) - mean(ret[portfolio_bm == 1])
  )

#============================================================================
#============================ SMB AND RMW FACTOR ============================
#============================================================================

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on OP # 
# (REPLICATED) # 

factors_monthly_op <- portfolios_ff_op %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_op)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_op = unique(portfolio_op)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_op_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    rmw_replicated = mean(ret[portfolio_op == 3]) - mean(ret[portfolio_op == 1])
  )

# Merge bm and op data # 
factors_monthly <- factors_monthly_op %>% 
  inner_join(factors_monthly, by = c("month"))

#============================================================================
#============================ SMB AND CMA FACTOR ============================
#============================================================================

# Computing the value-weighted average returns for each of the six portfolios # 
# Forming the Fama and French factors: size formed on INV # 
# (REPLICATED) # 

factors_monthly_inv <- portfolios_ff_inv %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_inv)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_inv = unique(portfolio_inv)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_inv_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    cma_replicated = mean(ret[portfolio_inv == 3]) - mean(ret[portfolio_inv == 1])
  )

# Merge bm, op, and inv data # 
factors_monthly <- factors_monthly_inv %>% 
  inner_join(factors_monthly, by = c("month"))

#============================================================================
#============================ SMB AND MOM FACTOR ============================
#============================================================================

factors_monthly_mom <- portfolios_ff_mom %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_mom)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_mom = unique(portfolio_mom)
  ) %>%
  group_by(month) %>%
  summarize(
    smb_mom_replicated = mean(ret[portfolio_me == 1]) - mean(ret[portfolio_me == 2]),
    wml_replicated = mean(ret[portfolio_mom == 3]) - mean(ret[portfolio_mom == 1])
  )

# Merge bm, op, inv, and mom data # 
factors_monthly <- factors_monthly_mom %>% 
  inner_join(factors_monthly, by = c("month"))

# Calculate weighted SMB # 
factors_monthly <- factors_monthly %>% 
  mutate(smb_replicated = 1/4*(smb_bm_replicated + smb_op_replicated + smb_inv_replicated + smb_mom_replicated)) %>% 
  select(month, smb_replicated, hml_replicated, rmw_replicated, cma_replicated, wml_replicated)

#============================================================================
#======================== REPLICATION EVALUATION  ===========================
#============================================================================

# NB: MULIG VI MÅ LASTE INN FF DATA PÅ NYTT, SIDEN MONTH = 1, 2, 3 OG IKKE DATOER 

# COMPARISON: FF VERSUS REPLICATION # 
rep_evaluation <- factors_ff_monthly %>%
  inner_join(factors_monthly, by = "month") 

#============================================================================
#============================= 2x3 SIX FACTORS  =============================
#============================================================================

# CLEANING #
five_factors_monthly <- rep_evaluation %>% 
  mutate(mkt_replicated = mkt_excess * 100, 
         smb_replicated = smb_replicated * 100, 
         hml_replicated = hml_replicated * 100, 
         rmw_replicated = rmw_replicated * 100, 
         cma_replicated = cma_replicated * 100, 
         wml_replicated = wml_replicated * 100) %>% 
  select(month, mkt_replicated, smb_replicated, hml_replicated, rmw_replicated, cma_replicated, wml_replicated)

# Computing factor means # 
mkt_mean = mean(five_factors_monthly$mkt_replicated)
smb_mean = mean(five_factors_monthly$smb_replicated)
hml_mean = mean(five_factors_monthly$hml_replicated)
rmw_mean = mean(five_factors_monthly$rmw_replicated)
cma_mean = mean(five_factors_monthly$cma_replicated)
wml_mean = mean(five_factors_monthly$wml_replicated)

# Computing factor std dev # 
mkt_std = sd(five_factors_monthly$mkt_replicated)
smb_std = sd(five_factors_monthly$smb_replicated)
hml_std = sd(five_factors_monthly$hml_replicated)
rmw_std = sd(five_factors_monthly$rmw_replicated)
cma_std = sd(five_factors_monthly$cma_replicated)
wml_std = sd(five_factors_monthly$wml_replicated)

# t-stat of the factors # 
t.test(five_factors_monthly$mkt_replicated)
t.test(five_factors_monthly$smb_replicated)
t.test(five_factors_monthly$hml_replicated)
t.test(five_factors_monthly$rmw_replicated)
t.test(five_factors_monthly$cma_replicated)
t.test(five_factors_monthly$wml_replicated)

#============================================================================
#======================== FACTOR SPANNING TEST  =============================
#============================================================================

# Run MKT on the remaining five factors # 
mkt_on_factors <- lm(mkt_replicated ~ smb_replicated + hml_replicated  + rmw_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(mkt_on_factors)

# Run SMB on the remaining five factors # 
smb_on_factors <- lm(smb_replicated ~ mkt_replicated + hml_replicated + rmw_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(smb_on_factors)

# Run HML on the remaining five factors # 
hml_on_factors <- lm(hml_replicated ~ mkt_replicated + smb_replicated + rmw_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(hml_on_factors)

# Run RMW on the remaining five factors # 
rmw_on_factors <- lm(rmw_replicated ~ mkt_replicated + smb_replicated + hml_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(rmw_on_factors)

# Run CMA on the remaining five factors # 
cma_on_factors <- lm(cma_replicated ~ mkt_replicated + smb_replicated + hml_replicated + rmw_replicated + wml_replicated, data = five_factors_monthly)
summary(cma_on_factors)

# Run WML on the remaining five factors # 
wml_on_factors <- lm(wml_replicated ~ mkt_replicated + smb_replicated + hml_replicated + rmw_replicated + cma_replicated, data = five_factors_monthly)
summary(wml_on_factors)

#============================================================================
#============================================================================
# EXCLUDING SMB FROM SIX FACTORS SINCE REDUNDANT # 

# Run MKT on the remaining five factors # 
mkt_on_factors_exSMB <- lm(mkt_replicated ~ hml_replicated  + rmw_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(mkt_on_factors_exSMB)

# Run HML on the remaining five factors # 
hml_on_factors_exSMB <- lm(hml_replicated ~ mkt_replicated + rmw_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(hml_on_factors_exSMB)

# Run RMW on the remaining five factors # 
rmw_on_factors_exSMB <- lm(rmw_replicated ~ mkt_replicated + hml_replicated + cma_replicated + wml_replicated, data = five_factors_monthly)
summary(rmw_on_factors_exSMB)

# Run CMA on the remaining five factors # 
cma_on_factors_exSMB <- lm(cma_replicated ~ mkt_replicated + hml_replicated + rmw_replicated + wml_replicated, data = five_factors_monthly)
summary(cma_on_factors_exSMB)

# Testing WML on only four factor (ex. SMB since redundant) # 
wml_on_factors_exSMB <- lm(wml_replicated ~ mkt_replicated + hml_replicated + rmw_replicated + cma_replicated, data = five_factors_monthly)
summary(wml_on_factors_exSMB)

#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================= 5x5 PORTFOLIOS ===============================
#============================================================================
#============================================================================
#============================================================================
#============================================================================

#============================================================================
#================================== BM 5x5 ==================================
#============================================================================

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the five portfolios in the size dimension # 
# NYSE breakpoints for the five portfolios in the B/M (value) dimension # 

assign_portfolio_5x5_lse <- function(data_5x5, var, percentiles) {
  breakpoints <- data_5x5 %>%
    summarize(breakpoint = quantile(
      {{ var }},
      probs = {{ percentiles }},
      na.rm = TRUE
    )) %>%
    pull(breakpoint) %>%
    as.numeric()
  
  data_5x5 %>%
    mutate(portfolio = findInterval({{ var }}, sort(breakpoints), all.inside = TRUE)) %>%
    pull(portfolio)
}

portfolios_ff_5x5 <- variables_ff %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_5x5_lse(
      data_5x5 = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    ),
    portfolio_bm = assign_portfolio_5x5_lse(
      data_5x5 = cur_data(),
      var = bm_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_bm)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_5x5 <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_5x5, by = c("ID", "sorting_date"))

#============================================================================
#================================== OP 5x5 ==================================
#============================================================================

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the OP (profitability) dimension # 

portfolios_ff_op_5x5 <- variables_ff_op %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    ),
    portfolio_op = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = op_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_op)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_op_5x5 <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_op_5x5, by = c("ID", "sorting_date"))

#============================================================================
#================================== INV 5x5 =================================
#============================================================================

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the INV (investment) dimension # 

portfolios_ff_inv_5x5 <- variables_ff_inv %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = me_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    ),
    portfolio_inv = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = inv_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_inv)

# Merge the portfolios to the return data for the rest of the year # 
portfolios_ff_inv_5x5 <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_inv_5x5, by = c("ID", "sorting_date"))

#============================================================================
#================================== MOM 5x5 =================================
#============================================================================

# Construct portfolio based on NYSE breakpoints # 
# NYSE median breakpoints for the two portfolios in the size dimension # 
# NYSE breakpoints for the three portfolios in the MOM (investment) dimension # 

portfolios_ff_mom_5x5 <- variables_ff_mom %>%
  inner_join(data_ff, by = c("ID" = "ID", "sorting_date" = "month")) %>%
  group_by(sorting_date) %>%
  mutate(
    portfolio_me = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = me_ff_month,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    ),
    portfolio_mom = assign_portfolio_5x5_lse(
      data = cur_data(),
      var = mom_ff,
      percentiles = c(0, 0.2, 0.4, 0.6, 0.8, 1)
    )
  ) %>%
  select(ID, sorting_date, portfolio_me, portfolio_mom)

portfolios_ff_mom_5x5 <- data_ff %>%
  mutate(sorting_date = case_when(
    month(month) <= 6 ~ ymd(paste0(year(month) - 1, "0701")),
    month(month) >= 7 ~ ymd(paste0(year(month), "0701"))
  )) %>%
  inner_join(portfolios_ff_mom_5x5, by = c("ID", "sorting_date"))

#============================================================================
#============================ BM 5x5 PORTFOLIO  =============================
#============================================================================

# Computing the value-weighted average returns for each of the 25 portfolios # 
# Forming the Fama and French factors: size formed on BM #

factors_ff_monthly_replicated_5x5 <- portfolios_ff_5x5 %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_bm)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_bm = unique(portfolio_bm)
  ) %>%
  group_by(month) %>%
  summarize(
    P1 = ret[portfolio == 11], 
    P2 = ret[portfolio == 12], 
    P3 = ret[portfolio == 13], 
    P4 = ret[portfolio == 14], 
    P5 = ret[portfolio == 15], 
    P6 = ret[portfolio == 21], 
    P7 = ret[portfolio == 22], 
    P8 = ret[portfolio == 23], 
    P9 = ret[portfolio == 24], 
    P10 = ret[portfolio == 25], 
    P11 = ret[portfolio == 31], 
    P12 = ret[portfolio == 32], 
    P13 = ret[portfolio == 33], 
    P14 = ret[portfolio == 34], 
    P15 = ret[portfolio == 35], 
    P16 = ret[portfolio == 41], 
    P17 = ret[portfolio == 42], 
    P18 = ret[portfolio == 43], 
    P19 = ret[portfolio == 44], 
    P20 = ret[portfolio == 45], 
    P21 = ret[portfolio == 51], 
    P22 = ret[portfolio == 52], 
    P23 = ret[portfolio == 53], 
    P24 = ret[portfolio == 54], 
    P25 = ret[portfolio == 55], 
  )

P1_mean = mean(factors_ff_monthly_replicated_5x5$P1*100)
P2_mean = mean(factors_ff_monthly_replicated_5x5$P2*100)
P3_mean = mean(factors_ff_monthly_replicated_5x5$P3*100)
P4_mean = mean(factors_ff_monthly_replicated_5x5$P4*100)
P5_mean = mean(factors_ff_monthly_replicated_5x5$P5*100)
P6_mean = mean(factors_ff_monthly_replicated_5x5$P6*100)
P7_mean = mean(factors_ff_monthly_replicated_5x5$P7*100)
P8_mean = mean(factors_ff_monthly_replicated_5x5$P8*100)
P9_mean = mean(factors_ff_monthly_replicated_5x5$P9*100)
P10_mean = mean(factors_ff_monthly_replicated_5x5$P10*100)
P11_mean = mean(factors_ff_monthly_replicated_5x5$P11*100)
P12_mean = mean(factors_ff_monthly_replicated_5x5$P12*100)
P13_mean = mean(factors_ff_monthly_replicated_5x5$P13*100)
P14_mean = mean(factors_ff_monthly_replicated_5x5$P14*100)
P15_mean = mean(factors_ff_monthly_replicated_5x5$P15*100)
P16_mean = mean(factors_ff_monthly_replicated_5x5$P16*100)
P17_mean = mean(factors_ff_monthly_replicated_5x5$P17*100)
P18_mean = mean(factors_ff_monthly_replicated_5x5$P18*100)
P19_mean = mean(factors_ff_monthly_replicated_5x5$P19*100)
P20_mean = mean(factors_ff_monthly_replicated_5x5$P20*100)
P21_mean = mean(factors_ff_monthly_replicated_5x5$P21*100)
P22_mean = mean(factors_ff_monthly_replicated_5x5$P22*100)
P23_mean = mean(factors_ff_monthly_replicated_5x5$P23*100)
P24_mean = mean(factors_ff_monthly_replicated_5x5$P24*100)
P25_mean = mean(factors_ff_monthly_replicated_5x5$P25*100)

#============================================================================
#============================ OP 5x5 PORTFOLIO  =============================
#============================================================================

# Computing the value-weighted average returns for each of the 25 portfolios # 
# Forming the Fama and French factors: size formed on OP #

factors_ff_monthly_replicated_op_5x5 <- portfolios_ff_op_5x5 %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_op)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_op = unique(portfolio_op)
  ) %>%
  group_by(month) %>%
  summarize(
    P1 = ret[portfolio == 11], 
    P2 = ret[portfolio == 12], 
    P3 = ret[portfolio == 13], 
    P4 = ret[portfolio == 14], 
    P5 = ret[portfolio == 15], 
    P6 = ret[portfolio == 21], 
    P7 = ret[portfolio == 22], 
    P8 = ret[portfolio == 23], 
    P9 = ret[portfolio == 24], 
    P10 = ret[portfolio == 25], 
    P11 = ret[portfolio == 31], 
    P12 = ret[portfolio == 32], 
    P13 = ret[portfolio == 33], 
    P14 = ret[portfolio == 34], 
    P15 = ret[portfolio == 35], 
    P16 = ret[portfolio == 41], 
    P17 = ret[portfolio == 42], 
    P18 = ret[portfolio == 43], 
    P19 = ret[portfolio == 44], 
    P20 = ret[portfolio == 45], 
    P21 = ret[portfolio == 51], 
    P22 = ret[portfolio == 52], 
    P23 = ret[portfolio == 53], 
    P24 = ret[portfolio == 54], 
    P25 = ret[portfolio == 55], 
  )

P1_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P1*100)
P2_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P2*100)
P3_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P3*100)
P4_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P4*100)
P5_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P5*100)
P6_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P6*100)
P7_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P7*100)
P8_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P8*100)
P9_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P9*100)
P10_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P10*100)
P11_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P11*100)
P12_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P12*100)
P13_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P13*100)
P14_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P14*100)
P15_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P15*100)
P16_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P16*100)
P17_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P17*100)
P18_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P18*100)
P19_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P19*100)
P20_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P20*100)
P21_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P21*100)
P22_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P22*100)
P23_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P23*100)
P24_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P24*100)
P25_mean_op = mean(factors_ff_monthly_replicated_op_5x5$P25*100)

#============================================================================
#============================ INV 5x5 PORTFOLIO  ============================
#============================================================================

# Computing the value-weighted average returns for each of the 25 portfolios # 
# Forming the Fama and French factors: size formed on OP #

factors_ff_monthly_replicated_inv_5x5 <- portfolios_ff_inv_5x5 %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_inv)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_inv = unique(portfolio_inv)
  ) %>%
  group_by(month) %>%
  summarize(
    P1 = ret[portfolio == 11], 
    P2 = ret[portfolio == 12], 
    P3 = ret[portfolio == 13], 
    P4 = ret[portfolio == 14], 
    P5 = ret[portfolio == 15], 
    P6 = ret[portfolio == 21], 
    P7 = ret[portfolio == 22], 
    P8 = ret[portfolio == 23], 
    P9 = ret[portfolio == 24], 
    P10 = ret[portfolio == 25], 
    P11 = ret[portfolio == 31], 
    P12 = ret[portfolio == 32], 
    P13 = ret[portfolio == 33], 
    P14 = ret[portfolio == 34], 
    P15 = ret[portfolio == 35], 
    P16 = ret[portfolio == 41], 
    P17 = ret[portfolio == 42], 
    P18 = ret[portfolio == 43], 
    P19 = ret[portfolio == 44], 
    P20 = ret[portfolio == 45], 
    P21 = ret[portfolio == 51], 
    P22 = ret[portfolio == 52], 
    P23 = ret[portfolio == 53], 
    P24 = ret[portfolio == 54], 
    P25 = ret[portfolio == 55], 
  )

inv_P1_mean = mean(factors_ff_monthly_replicated_inv_5x5$P1*100)
inv_P2_mean = mean(factors_ff_monthly_replicated_inv_5x5$P2*100)
inv_P3_mean = mean(factors_ff_monthly_replicated_inv_5x5$P3*100)
inv_P4_mean = mean(factors_ff_monthly_replicated_inv_5x5$P4*100)
inv_P5_mean = mean(factors_ff_monthly_replicated_inv_5x5$P5*100)
inv_P6_mean = mean(factors_ff_monthly_replicated_inv_5x5$P6*100)
inv_P7_mean = mean(factors_ff_monthly_replicated_inv_5x5$P7*100)
inv_P8_mean = mean(factors_ff_monthly_replicated_inv_5x5$P8*100)
inv_P9_mean = mean(factors_ff_monthly_replicated_inv_5x5$P9*100)
inv_P10_mean = mean(factors_ff_monthly_replicated_inv_5x5$P10*100)
inv_P11_mean = mean(factors_ff_monthly_replicated_inv_5x5$P11*100)
inv_P12_mean = mean(factors_ff_monthly_replicated_inv_5x5$P12*100)
inv_P13_mean = mean(factors_ff_monthly_replicated_inv_5x5$P13*100)
inv_P14_mean = mean(factors_ff_monthly_replicated_inv_5x5$P14*100)
inv_P15_mean = mean(factors_ff_monthly_replicated_inv_5x5$P15*100)
inv_P16_mean = mean(factors_ff_monthly_replicated_inv_5x5$P16*100)
inv_P17_mean = mean(factors_ff_monthly_replicated_inv_5x5$P17*100)
inv_P18_mean = mean(factors_ff_monthly_replicated_inv_5x5$P18*100)
inv_P19_mean = mean(factors_ff_monthly_replicated_inv_5x5$P19*100)
inv_P20_mean = mean(factors_ff_monthly_replicated_inv_5x5$P20*100)
inv_P21_mean = mean(factors_ff_monthly_replicated_inv_5x5$P21*100)
inv_P22_mean = mean(factors_ff_monthly_replicated_inv_5x5$P22*100)
inv_P23_mean = mean(factors_ff_monthly_replicated_inv_5x5$P23*100)
inv_P24_mean = mean(factors_ff_monthly_replicated_inv_5x5$P24*100)
inv_P25_mean = mean(factors_ff_monthly_replicated_inv_5x5$P25*100)

#============================================================================
#============================ MOM 5x5 PORTFOLIO  ============================
#============================================================================

# Computing the value-weighted average returns for each of the 25 portfolios # 
# Forming the Fama and French factors: size formed on OP #

factors_ff_monthly_replicated_mom_5x5 <- portfolios_ff_mom_5x5 %>%
  mutate(portfolio = paste0(portfolio_me, portfolio_mom)) %>%
  group_by(portfolio, month) %>%
  summarize(
    ret = weighted.mean(ret_excess, MV), .groups = "drop",
    portfolio_me = unique(portfolio_me),
    portfolio_mom = unique(portfolio_mom)
  ) %>%
  group_by(month) %>%
  summarize(
    P1 = ret[portfolio == 11], 
    P2 = ret[portfolio == 12], 
    P3 = ret[portfolio == 13], 
    P4 = ret[portfolio == 14], 
    P5 = ret[portfolio == 15], 
    P6 = ret[portfolio == 21], 
    P7 = ret[portfolio == 22], 
    P8 = ret[portfolio == 23], 
    P9 = ret[portfolio == 24], 
    P10 = ret[portfolio == 25], 
    P11 = ret[portfolio == 31], 
    P12 = ret[portfolio == 32], 
    P13 = ret[portfolio == 33], 
    P14 = ret[portfolio == 34], 
    P15 = ret[portfolio == 35], 
    P16 = ret[portfolio == 41], 
    P17 = ret[portfolio == 42], 
    P18 = ret[portfolio == 43], 
    P19 = ret[portfolio == 44], 
    P20 = ret[portfolio == 45], 
    P21 = ret[portfolio == 51], 
    P22 = ret[portfolio == 52], 
    P23 = ret[portfolio == 53], 
    P24 = ret[portfolio == 54], 
    P25 = ret[portfolio == 55], 
  )

mom_P1_mean = mean(factors_ff_monthly_replicated_mom_5x5$P1*100)
mom_P2_mean = mean(factors_ff_monthly_replicated_mom_5x5$P2*100)
mom_P3_mean = mean(factors_ff_monthly_replicated_mom_5x5$P3*100)
mom_P4_mean = mean(factors_ff_monthly_replicated_mom_5x5$P4*100)
mom_P5_mean = mean(factors_ff_monthly_replicated_mom_5x5$P5*100)
mom_P6_mean = mean(factors_ff_monthly_replicated_mom_5x5$P6*100)
mom_P7_mean = mean(factors_ff_monthly_replicated_mom_5x5$P7*100)
mom_P8_mean = mean(factors_ff_monthly_replicated_mom_5x5$P8*100)
mom_P9_mean = mean(factors_ff_monthly_replicated_mom_5x5$P9*100)
mom_P10_mean = mean(factors_ff_monthly_replicated_mom_5x5$P10*100)
mom_P11_mean = mean(factors_ff_monthly_replicated_mom_5x5$P11*100)
mom_P12_mean = mean(factors_ff_monthly_replicated_mom_5x5$P12*100)
mom_P13_mean = mean(factors_ff_monthly_replicated_mom_5x5$P13*100)
mom_P14_mean = mean(factors_ff_monthly_replicated_mom_5x5$P14*100)
mom_P15_mean = mean(factors_ff_monthly_replicated_mom_5x5$P15*100)
mom_P16_mean = mean(factors_ff_monthly_replicated_mom_5x5$P16*100)
mom_P17_mean = mean(factors_ff_monthly_replicated_mom_5x5$P17*100)
mom_P18_mean = mean(factors_ff_monthly_replicated_mom_5x5$P18*100)
mom_P19_mean = mean(factors_ff_monthly_replicated_mom_5x5$P19*100)
mom_P20_mean = mean(factors_ff_monthly_replicated_mom_5x5$P20*100)
mom_P21_mean = mean(factors_ff_monthly_replicated_mom_5x5$P21*100)
mom_P22_mean = mean(factors_ff_monthly_replicated_mom_5x5$P22*100)
mom_P23_mean = mean(factors_ff_monthly_replicated_mom_5x5$P23*100)
mom_P24_mean = mean(factors_ff_monthly_replicated_mom_5x5$P24*100)
mom_P25_mean = mean(factors_ff_monthly_replicated_mom_5x5$P25*100)

#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================= GRS STATISTIC ================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================

library(GRS.test)

#============================================================================
#=============================== SIZE-BM GRS  ===============================
#============================================================================

# Three-factors 
factor_mat_3 = five_factors_monthly[1:354,2:4]                  # Fama-French 3-factor model
ret_mat_BM = factors_ff_monthly_replicated_5x5[1:354,2:26]      # 25 size-BM portfolio returns
GRS_BM_3 = GRS.test(ret_mat_BM,factor_mat_3)$GRS.stat           # BM 3-factor 
GRS_BM_3_p = GRS.test(ret_mat_BM,factor_mat_3)$GRS.pval         # BM 3-pvalue 

# Five-factors 
factor_mat_5 = five_factors_monthly[1:354,2:6]                  # Fama-French 5-factor model
GRS_BM_5 = GRS.test(ret_mat_BM,factor_mat_5)$GRS.stat           # 25 size-BM portfolio returns
GRS_BM_5_p = GRS.test(ret_mat_BM,factor_mat_5)$GRS.pval         # BM 5-pvalue 

# Six-factors 
factor_mat_6 = five_factors_monthly[1:354,2:7]                  # Fama-French 6-factor model
ret_mat_BM_6 = factors_ff_monthly_replicated_5x5[1:354,2:26]
GRS_BM_6 = GRS.test(ret_mat_BM,factor_mat_6)$GRS.stat           # 25 size-BM portfolio returns
GRS_BM_6_p = GRS.test(ret_mat_BM,factor_mat_6)$GRS.pval         # BM 6-pvalue

#============================================================================
#=============================== SIZE-OP GRS  ===============================
#============================================================================

# Three-factors 
ret_mat_OP = factors_ff_monthly_replicated_op_5x5[1:354,2:26]   # 25 size-OP portfolio returns
GRS_OP_3 = GRS.test(ret_mat_OP,factor_mat_3)$GRS.stat           # Fama-French 3-factor model
GRS_OP_3_p = GRS.test(ret_mat_OP,factor_mat_3)$GRS.pval         # OP 3-pvalue 

# Five-factors 
GRS_OP_5 = GRS.test(ret_mat_OP,factor_mat_5)$GRS.stat           # Fama-French 5-factor model
GRS_OP_5_p = GRS.test(ret_mat_OP,factor_mat_5)$GRS.pval         # OP 5-pvalue 

# Six-factors          
GRS_OP_6 = GRS.test(ret_mat_OP,factor_mat_6)$GRS.stat           # Fama-French 6-factor model
GRS_OP_6_p = GRS.test(ret_mat_OP,factor_mat_6)$GRS.pval         # OP 6-pvalue 

#============================================================================
#=============================== SIZE-INV GRS  ==============================
#============================================================================

# Three-factors 
ret_mat_INV = factors_ff_monthly_replicated_inv_5x5[1:354,2:26] # 25 size-INV portfolio returns
GRS_INV_3 = GRS.test(ret_mat_INV,factor_mat_3)$GRS.stat         # Fama-French 3-factor model
GRS_INV_3_p = GRS.test(ret_mat_INV,factor_mat_3)$GRS.pval       # INV 3-pvalue 

# Five-factors 
GRS_INV_5 = GRS.test(ret_mat_INV,factor_mat_5)$GRS.stat         # Fama-French 5-factor model
GRS_INV_5_p = GRS.test(ret_mat_INV,factor_mat_5)$GRS.pval       # INV 5-pvalue 

# Six-factors 
GRS_INV_6 = GRS.test(ret_mat_INV,factor_mat_6)$GRS.stat         # Fama-French 6-factor model
GRS_INV_6_p = GRS.test(ret_mat_INV,factor_mat_6)$GRS.pval       # INV 6-pvalue 

#============================================================================
#=============================== SIZE-MOM GRS  ==============================
#============================================================================

# Three-factors 
ret_mat_MOM = factors_ff_monthly_replicated_mom_5x5[1:354,2:26] # 25 size-INV portfolio returns
factor_mat_3_MOM = five_factors_monthly[1:354,2:4]
GRS_MOM_3 = GRS.test(ret_mat_MOM,factor_mat_3_MOM)$GRS.stat         # Fama-French 3-factor model
GRS_MOM_3_p = GRS.test(ret_mat_MOM,factor_mat_3_MOM)$GRS.pval       # INV 3-pvalue 

# Five-factors 
factor_mat_5_MOM = five_factors_monthly[1:354,2:6]
GRS_MOM_5 = GRS.test(ret_mat_MOM,factor_mat_5_MOM)$GRS.stat         # Fama-French 5-factor model
GRS_MOM_5_p = GRS.test(ret_mat_MOM,factor_mat_5_MOM)$GRS.pval       # INV 5-pvalue 

# Six-factors 
factor_mat_6_MOM = five_factors_monthly[1:354,2:7]
GRS_MOM_6 = GRS.test(ret_mat_MOM,factor_mat_6_MOM)$GRS.stat         # Fama-French 6-factor model
GRS_MOM_6_p = GRS.test(ret_mat_MOM,factor_mat_6_MOM)$GRS.pval       # INV 6-pvalue 


